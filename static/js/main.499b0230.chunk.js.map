{"version":3,"sources":["components/ColorfulMsg.tsx","components/MsgList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ColorfulMsg","props","style","color","children","MsgList","handleClick","axios","get","then","res","setState","msgList","data","catch","err","alert","state","colorfulMsgList","this","map","val","message","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"oSAOeA,EALK,SAACC,GACjB,OAAO,uBAAGC,MAAO,CAAEC,MAAOF,EAAME,QAAUF,EAAMG,WCiCrCC,E,YA5Bb,WAAYJ,GAAa,IAAD,8BACtB,4CAAMA,KAMRK,YAAc,WACZC,IACGC,IAAI,qCACJC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,QAASF,EAAIG,KAAKD,aAC9CE,OAAM,SAAAC,GAAG,OAAIC,MAAMD,OATtB,EAAKE,MAAQ,CACTL,QAAS,IAHS,E,sEAetB,IAAMM,EAAmBC,KAAKF,MAAcL,QAAQQ,KAAI,SAACC,GAAD,OACpD,kBAAC,EAAD,CAAalB,MAAOkB,EAAIlB,OAAQkB,EAAIC,YAGxC,OACI,oCACA,4BAAQC,QAASJ,KAAKb,aAAtB,8CACCY,O,GAvBaM,IAAMC,WCSbC,EAVH,WACV,OACE,oCACE,yEACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLC,QAAQD,MAAMA,EAAMnB,c","file":"static/js/main.499b0230.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ColorfulMsg = (props :any) => {\n    return <p style={{ color: props.color }}>{props.children}</p>;\n    \n};\n\nexport default ColorfulMsg;","import React from \"react\";\nimport axios from \"axios\";\n\nimport ColorfulMsg from \"./ColorfulMsg\";\n\n\n \nclass MsgList extends React.Component {\n  constructor(props :any) {\n    super(props);\n    this.state = {\n        msgList: []\n    };\n  }\n\n  handleClick = () => {\n    axios\n      .get(\"https://api.myjson.com/bins/mt9wv\")\n      .then(res => this.setState({ msgList: res.data.msgList }))\n      .catch(err => alert(err));\n  };\n \n  render() {\n    const colorfulMsgList = (this.state as any).msgList.map((val :any) => (\n        <ColorfulMsg color={val.color}>{val.message}</ColorfulMsg>\n    ));\n\n    return (\n        <>\n        <button onClick={this.handleClick}>メッセージ取得</button>\n        {colorfulMsgList}\n        </>\n    );\n  }\n}\n \nexport default MsgList;","import React from 'react';\nimport './App.css';\n\nimport MsgList from \"./components/MsgList\";\n\n\nconst App = () => {\n  return (\n    <>\n      <h2>Reactハンズオン！</h2>\n      <MsgList />\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}